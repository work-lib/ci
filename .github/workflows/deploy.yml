name: Deploy to EKS

on:
  workflow_call:
    inputs:  
      TARGET_ENV:
        type: string
        required: true
      NEEDS_MIGRATION:
        type: boolean
        required: false    
        default: false
      TEST_MODE:
        type: boolean
        required: false    
        default: false
    secrets:
      WORKLIB_GITHUB_SSH_KEY:
        required: true
# QA and preprod
      AWS_ACCESS_KEY_ID_DEV:
        required: true
      AWS_SECRET_ACCESS_KEY_DEV:
        required: true
      AWS_ROLE_EXTERNAL_ID_DEV:
        required: true
      AWS_ROLE_TO_ASSUME_DEV:
        required: true
      QA_SLACK_WEBHOOK_URL:
        required: true
# preprod
      PPD_SLACK_WEBHOOK_URL:
        required: true
# prod
      AWS_ACCESS_KEY_ID_PROD:
        required: true
      AWS_SECRET_ACCESS_KEY_PROD:
        required: true
      AWS_ROLE_EXTERNAL_ID_PROD:
        required: true
      AWS_ROLE_TO_ASSUME_PROD:
        required: true
      PRD_SLACK_WEBHOOK_URL:
        required: true
jobs:
  build:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-tag.outputs.branch }}
      microservice: ${{ steps.set-tag.outputs.microservice_short_name }}
      deploy_type: ${{ steps.set-tag.outputs.deploy_type }}      

    steps:
    - name: Check for master branch only
      if: ((github.ref_name != 'master') && (inputs.TEST_MODE != true)) || github.event.inputs.image-tag == ''
      run: echo "This pipeline should only be run on master branch with an image-tag"; exit 1

    - name: Checkout
      uses: actions/checkout@v2
      with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.
          ref: ${{ github.ref_name }}

    - name: Set tag
      id: set-tag
      run: |
        GIT_TAG="${{ github.event.inputs.image-tag }}"
        GIT_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | awk -F'/' '{ print $NF}')
        
        MICROSERVICE=$(echo ${GITHUB_REPOSITORY} | awk -F'/' '{ print $NF}')
        MICROSERVICE_SHORT_NAME=$(echo ${MICROSERVICE} | awk -F'service-' '{ print $NF}')
        deploy_type="deployment"

        echo 'TEST_MODE='${{ inputs.TEST_MODE }}
        echo 'TARGET_ENV='${{ inputs.TARGET_ENV }}

        echo "GIT_BRANCH: ${GIT_BRANCH}"
        echo "GIT_TAG: ${GIT_TAG}"
        echo "MICROSERVICE = ${MICROSERVICE}"
        echo "MICROSERVICE_SHORT_NAME = ${MICROSERVICE_SHORT_NAME}"
        echo "NEEDS_MIGRATION = ${{ inputs.NEEDS_MIGRATION }}"
        
        echo '::set-output name=branch::'$GIT_BRANCH
        echo '::set-output name=tag::'$GIT_TAG
        echo '::set-output name=microservice::'$MICROSERVICE
        echo '::set-output name=microservice_short_name::'$MICROSERVICE_SHORT_NAME
        echo '::set-output name=deploy_type::'$deploy_type
    - uses: kanga333/variable-mapper@master
      with:
        key: "${{ inputs.TARGET_ENV }}"
        map: |
          {
            "production": {
              "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID_PROD }}",
              "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}",
              "AWS_ROLE_EXTERNAL_ID": "${{ secrets.AWS_ROLE_EXTERNAL_ID_PROD }}",
              "AWS_ROLE_TO_ASSUME": "${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}",
              "REPO_NAME": "gekko/${{ steps.set-tag.outputs.microservice }}",
              "EKS_CLUSTER_NAME": "gek-prd",
              "environment": "production",
              "NODE_ENV": "production",
              "K8S_NAMESPACE":"worklib",
              "SLACK_WEBHOOK_URL" : "${{ secrets.PRD_SLACK_WEBHOOK_URL }}"
            },
            "preprod": {
              "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}",
              "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}",
              "AWS_ROLE_EXTERNAL_ID": "${{ secrets.AWS_ROLE_EXTERNAL_ID_DEV }}",
              "AWS_ROLE_TO_ASSUME": "${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}",
              "REPO_NAME": "gekko/${{ steps.set-tag.outputs.microservice }}",
              "EKS_CLUSTER_NAME": "gek-ppd",
              "environment": "preprod",
              "NODE_ENV": "staging-aws",
              "K8S_NAMESPACE":"worklib",
              "SLACK_WEBHOOK_URL" : "${{ secrets.PPD_SLACK_WEBHOOK_URL }}"
            },
            ".*": {
              "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}",
              "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}",
              "AWS_ROLE_EXTERNAL_ID": "${{ secrets.AWS_ROLE_EXTERNAL_ID_DEV }}",
              "AWS_ROLE_TO_ASSUME": "${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}",
              "REPO_NAME": "gekko/${{ steps.set-tag.outputs.microservice }}",
              "EKS_CLUSTER_NAME": "gek-ppd",
              "environment": "qa",
              "NODE_ENV": "qa",
              "K8S_NAMESPACE":"worklib-qa",
              "SLACK_WEBHOOK_URL" : "${{ secrets.QA_SLACK_WEBHOOK_URL }}"
            }
          }
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key:  ${{env.AWS_SECRET_ACCESS_KEY }}
        role-external-id: ${{ env.AWS_ROLE_EXTERNAL_ID }}
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-skip-session-tagging: true
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker pull
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPO_NAME }}
        IMAGE_TAG: ${{ steps.set-tag.outputs.tag }}
      if: ( inputs.TEST_MODE != true )
      run: |
        # Build a docker container and push it to ECR
        echo "Pull image from ECR..."
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Deploy to EKS Cluster
      env:
        IMAGE_TAG: ${{ steps.set-tag.outputs.tag }}
        MICROSERVICE_SHORT_NAME: ${{ steps.set-tag.outputs.microservice_short_name }}
      run: |

       aws eks update-kubeconfig --name=${{ env.EKS_CLUSTER_NAME }}

       # set the environment variables
       cd deploy/k8s_ci/
       ./replace_parameters.sh ${{ env.environment }} ${{ env.NODE_ENV }} $MICROSERVICE_SHORT_NAME $IMAGE_TAG
       cd -
       
       curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.6/bin/linux/amd64/kubectl
       chmod a+rx kubectl

       if ${{ inputs.TEST_MODE }}; then 
            echo "./replace_parameters.sh ${{ env.environment }} ${{ env.NODE_ENV }} $MICROSERVICE_SHORT_NAME $IMAGE_TAG"
            echo "./kubectl delete job job-$MICROSERVICE_SHORT_NAME-migration -n ${{ env.K8S_NAMESPACE }}"
            echo "./kubectl apply -k deploy/k8s_ci/overlays/${{ env.environment }}"
            echo "./kubectl rollout status deployment service-$MICROSERVICE_SHORT_NAME -n ${{ env.K8S_NAMESPACE }}"
            echo "./kubectl logs job/job-$MICROSERVICE_SHORT_NAME-migration -n ${{ env.K8S_NAMESPACE }}"
       else
           if ${{ inputs.NEEDS_MIGRATION }}; then
               # delete job to prevent failure if it already exists 
               ./kubectl delete job job-$MICROSERVICE_SHORT_NAME-migration -n ${{ env.K8S_NAMESPACE }} || echo "job-$MICROSERVICE_SHORT_NAME-migration does not exists, it is ok"
           fi

           # Deploy api
           ./kubectl apply -k deploy/k8s_ci/overlays/${{ env.environment }}

           # output deployment status
           ./kubectl rollout status deployment service-$MICROSERVICE_SHORT_NAME -n ${{ env.K8S_NAMESPACE }}

           if ${{ inputs.NEEDS_MIGRATION }}; then
               # output migration logs
               #kubectl wait --for=condition=complete job/job-$MICROSERVICE_SHORT_NAME-migration --timeout=60s -n worklib
               ./kubectl logs job/job-$MICROSERVICE_SHORT_NAME-migration -n ${{ env.K8S_NAMESPACE }}
           fi
       fi
       
  notification:
    needs: build
    if: always() 
    name: slackNotificationResult
    runs-on: ubuntu-latest
    steps:
    - uses: kanga333/variable-mapper@master
      with:
        key: "${{ needs.build.outputs.branch }}"
        map: |
          {
            "master": {
              "SLACK_WEBHOOK_URL" : "${{ secrets.PRD_SLACK_WEBHOOK_URL }}"
            },
            "staging": {
              "SLACK_WEBHOOK_URL" : "${{ secrets.PPD_SLACK_WEBHOOK_URL }}"
            },
            ".*": {
              "SLACK_WEBHOOK_URL" : "${{ secrets.QA_SLACK_WEBHOOK_URL }}"
            }
          }

    - name: Send notification to Slack
      id: slack
      uses: slackapi/slack-github-action@v1.18.0
      with:
        # For posting a rich message using Block Kit
        payload: |
          {
            "text": "Deployment finished",
            "blocks": [
                {
                    "type": "context",
                    "elements": [
                        {
                            "type": "image",
                            "image_url": "https://worklib-storage-prod.s3.eu-west-1.amazonaws.com/system/${{ needs.build.result}}.png",
                            "alt_text": "status icon"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "The <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}?check_suite_focus=true|${{ needs.build.outputs.deploy_type }}> finished for `${{ needs.build.outputs.microservice }}` with status: *${{ needs.build.result }}*"
                        }
                    ]
                },
                {
                  "type": "divider"
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK