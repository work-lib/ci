name: Build and Push
# trigger by push on tag                                        -> create an image on prod    with ecr tag equal to git tag
# trigger by push on develop branch                             -> create an image on preprod and update preprod with the last image tagged develop
# trigger by workflow dispatch on master                        -> Do nothing (exit 1)
# trigger by workflow dispatch on all branches except master    -> create an image on preprod with ecr tag equal to the name of the branch (after last / feature/mafeature -> mafeature)

on:
  workflow_call:
    inputs:
      NEEDS_MIGRATION:
        type: boolean
        required: false    
        default: false
      NEEDS_IMAGE_BUILD:
        type: boolean
        required: false    
        default: true
      NEEDS_DEPLOY:
        type: boolean
        required: false    
        default: true
      AUTOTEST_MODE:
        type: boolean
        required: false    
        default: false
      IMAGE_TAG:
        type: string
        required: false    
      MICROSERVICE:
        type: string
        required: false    
      ECR_REPOSITORY:
        type: string
        required: false 
    secrets:
      WORKLIB_GITHUB_SSH_KEY:
        required: true
# QA and preprod
      AWS_ACCESS_KEY_ID_DEV:
        required: true
      AWS_SECRET_ACCESS_KEY_DEV:
        required: true
      AWS_ROLE_EXTERNAL_ID_DEV:
        required: true
      AWS_ROLE_TO_ASSUME_DEV:
        required: true
      QA_SLACK_WEBHOOK_URL:
        required: true
# preprod
      PPD_SLACK_WEBHOOK_URL:
        required: true
# prod
      AWS_ACCESS_KEY_ID_PROD:
        required: true
      AWS_SECRET_ACCESS_KEY_PROD:
        required: true
      AWS_ROLE_EXTERNAL_ID_PROD:
        required: true
      AWS_ROLE_TO_ASSUME_PROD:
        required: true
      PRD_SLACK_WEBHOOK_URL:
        required: true

jobs:
  build:
    name: service-workflow
    timeout-minutes: 20
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-tag.outputs.branch }}
      microservice: ${{ steps.set-tag.outputs.microservice_short_name }}
      deploy_type: ${{ steps.set-tag.outputs.deploy_type }}
      migration_list: ${{ steps.set-tag.outputs.migration_list }}
      
    steps:

    - name: Deployment details
      run: echo "Pipeline run by '${{GITHUB.EVENT_NAME}}' on ${{GITHUB.REF_TYPE}} '${{github.ref_name}}' for '${{github.repository}}'"


    - name: Checkout (push on branch or push on tag or workflow_dispatch without tag )
      uses: actions/checkout@v2
      with:
          fetch-depth: 0 # OR "2" -> To retrieve the preceding commit.
          ref: ${{ github.ref_name }}

    - name: Set tag
      id: set-tag
      run: |
        if [[ "${{ inputs.IMAGE_TAG }}" ]]; then
          GIT_TAG="${{ inputs.IMAGE_TAG }}"
        else
          #GIT_TAG=$(echo ${GITHUB_REF#refs/heads/} | awk -F'/' '{ print $NF}')
          #convert "prefix/branch" into "prefix-branch" so the docker tag is valid
          GIT_TAG=$(echo ${GITHUB_REF#refs/heads/} | tr / -) 
        fi

        if [[ "${{ inputs.ECR_REPOSITORY }}" ]]; then
          ECR_REPOSITORY="${{ inputs.ECR_REPOSITORY }}"
        else
          ECR_REPOSITORY="gekko/"$(echo ${GITHUB_REPOSITORY} | awk -F'/' '{ print $NF}')
        fi


        if [[ "${{ inputs.AUTOTEST_MODE }}" = true ]]; then
          echo "AUTOTEST_MODE is running"
          GIT_BRANCH="autotest"
          deploy_type="autotest"
        elif [[ ${GITHUB_REF_TYPE} == 'tag' ]]; then
          echo "Git tag detected"
          GIT_BRANCH="master"
          # GIT_TAG=${{github.ref_name}}
          deploy_type="docker image build"
        else
          echo "Git branch detected"
          # If branch name is feature/myfeature, only extract "myfeature"
          GIT_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | awk -F'/' '{ print $NF}')
          # GIT_TAG=$(echo ${GITHUB_REF#refs/heads/} | awk -F'/' '{ print $NF}')
          deploy_type="deployment"

          if [[ $GIT_BRANCH == 'master' ]]; then
            echo "Workflow run on master branch, aborting."
            exit 1
          fi
        fi

        if [[ "${{ inputs.MICROSERVICE }}" ]]; then
          MICROSERVICE="${{ inputs.MICROSERVICE }}"
        else
          MICROSERVICE=$(echo ${GITHUB_REPOSITORY} | awk -F'/' '{ print $NF}')
        fi

        MICROSERVICE_SHORT_NAME=$(echo ${MICROSERVICE} | awk -F'service-' '{ print $NF}')

        # test if there were changes in DB migrations
        migrationList=$(git diff origin/master HEAD --name-only --diff-filter=d | grep migrations/ | awk '{printf "%s\\n", $0}')


        echo "GIT_BRANCH: ${GIT_BRANCH}"
        echo "GIT_TAG: ${GIT_TAG}"
        echo "MICROSERVICE = ${MICROSERVICE}"
        echo "MICROSERVICE_SHORT_NAME = ${MICROSERVICE_SHORT_NAME}"
        echo "NEEDS_MIGRATION = ${{ inputs.NEEDS_MIGRATION }}"
        echo "deploy_type = ${deploy_type}"
        echo "migrationList = ${migrationList}"
        echo "ECR_REPOSITORY = ${ECR_REPOSITORY}"
        
        echo "branch=$GIT_BRANCH" >> $GITHUB_OUTPUT
        echo "tag=$GIT_TAG" >> $GITHUB_OUTPUT
        echo "microservice=$MICROSERVICE" >> $GITHUB_OUTPUT
        echo "microservice_short_name=$MICROSERVICE_SHORT_NAME" >> $GITHUB_OUTPUT
        echo "deploy_type=$deploy_type" >> $GITHUB_OUTPUT
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_OUTPUT
        # for multi-line output
        echo "migration_list<<|" >> $GITHUB_OUTPUT
        echo "$migrationList" >> $GITHUB_OUTPUT
        echo "|" >> $GITHUB_OUTPUT

    - uses: kanga333/variable-mapper@master
      with:
        mode: fill
        key: "${{ steps.set-tag.outputs.branch }}"
        map: |
          {
            "master": {
              "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID_PROD }}",
              "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}",
              "AWS_ROLE_EXTERNAL_ID": "${{ secrets.AWS_ROLE_EXTERNAL_ID_PROD }}",
              "AWS_ROLE_TO_ASSUME": "${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}",
              "EKS_CLUSTER_NAME": "gek-prd",
              "environment": "production",
              "K8S_NAMESPACE":"worklib",
              "SLACK_WEBHOOK_URL" : "${{ secrets.PRD_SLACK_WEBHOOK_URL }}"
            },
            "staging": {
              "environment": "preprod",
              "K8S_NAMESPACE":"worklib"
            },
            "autotest": {
              "environment": "autotest",
              "K8S_NAMESPACE":"autotest"
            },
            ".*": {
              "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}",
              "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}",
              "AWS_ROLE_EXTERNAL_ID": "${{ secrets.AWS_ROLE_EXTERNAL_ID_DEV }}",
              "AWS_ROLE_TO_ASSUME": "${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}",
              "ECR_REPOSITORY": "${{ steps.set-tag.outputs.ECR_REPOSITORY }}",
              "EKS_CLUSTER_NAME": "gek-ppd",
              "environment": "qa",
              "K8S_NAMESPACE":"worklib-qa",
              "SLACK_WEBHOOK_URL" : "${{ secrets.QA_SLACK_WEBHOOK_URL }}"
            }
          }

    - name: Send notification to Slack
      id: slack
      uses: slackapi/slack-github-action@v1.18.0
      with:
        # For posting a rich message using Block Kit
        payload: |
          {
            "text": "${{ steps.set-tag.outputs.deploy_type}} started for `${{ env.environment }}` on `${{ steps.set-tag.outputs.microservice_short_name }}`",
            "blocks": [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "*${{ github.actor }}* started the <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}?check_suite_focus=true|${{ steps.set-tag.outputs.deploy_type}} > on `${{ env.environment }}` env for `${{ steps.set-tag.outputs.microservice_short_name }}` ${{ github.ref_type }} `${{github.ref_name}}`"
                    }
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key:  ${{env.AWS_SECRET_ACCESS_KEY }}
        role-external-id: ${{ env.AWS_ROLE_EXTERNAL_ID }}
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-skip-session-tagging: true
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image-service
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ steps.set-tag.outputs.tag }}
        DOCKER_BUILDKIT: 1
        WORKLIB_GITHUB_SSH_KEY: ${{ secrets.WORKLIB_GITHUB_SSH_KEY }}
      if: ( inputs.NEEDS_IMAGE_BUILD == true )
      run: |
       # apply ssh key if it is passed and needed for docker build
       if [ -z "$WORKLIB_GITHUB_SSH_KEY" ]; then
            docker build --pull -f ./Dockerfile_k8s -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        else
            echo "${WORKLIB_GITHUB_SSH_KEY}" > /tmp/ssh.key
            # Build a docker container and push it to ECR
            docker build --ssh ssh_key=/tmp/ssh.key --pull -f ./Dockerfile_k8s -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        fi
        
        echo "Pushing image to ECR...$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EKS Cluster (preprod only)
      env:
        IMAGE_TAG: ${{ steps.set-tag.outputs.tag }}
        MICROSERVICE_SHORT_NAME: ${{ steps.set-tag.outputs.microservice_short_name }}
        MICROSERVICE: ${{ steps.set-tag.outputs.microservice }}
      if: (steps.set-tag.outputs.branch != 'master')&&(steps.set-tag.outputs.branch != 'main')&&( inputs.NEEDS_DEPLOY == true )
      run: |

       aws eks update-kubeconfig --name=${{ env.EKS_CLUSTER_NAME }}

       # set the environment variables
       deploy_dir="deploy/k8s_ci"
       sub_dir="${{ env.environment }}"

       cd $deploy_dir
       ./replace_parameters.sh ${{ env.environment }} "NOTIMPORTANT" $MICROSERVICE_SHORT_NAME $IMAGE_TAG
       cd -
       
       curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.6/bin/linux/amd64/kubectl
       chmod a+rx kubectl
       if ${{ inputs.NEEDS_MIGRATION }}; then
           # delete job to prevent failure if it already exists 
           ./kubectl delete job job-$MICROSERVICE_SHORT_NAME-migration -n ${{ env.K8S_NAMESPACE }} || echo "job-$MICROSERVICE_SHORT_NAME-migration does not exists, it is ok"
       fi

       # Deploy api
       echo "./kubectl apply -k $deploy_dir/overlays/$sub_dir"
       ./kubectl apply -k ${deploy_dir}/overlays/${sub_dir}

       if ${{ inputs.NEEDS_MIGRATION }}; then
           # output migration logs
           kubectl wait --for=condition=complete job/job-$MICROSERVICE_SHORT_NAME-migration --timeout=150s -n ${{ env.K8S_NAMESPACE }} || echo "Timeout error. DB migrations did not fit the timout of 150 sec. It does NOT mean that the deployment is failed, please check the PODs statuses manually"
           ./kubectl logs job/job-$MICROSERVICE_SHORT_NAME-migration -n ${{ env.K8S_NAMESPACE }}

            echo "check DB migration status";
            if [ "$(kubectl -n ${{ env.K8S_NAMESPACE }} get jobs job-$MICROSERVICE_SHORT_NAME-migration -o jsonpath='{.status.conditions[?(@.type=="Failed")].status}')" = "True" ]; then 
              echo "DB migration failed";  
              exit 1; 
            # elif [ "$(kubectl -n ${{ env.K8S_NAMESPACE }} get jobs job-$MICROSERVICE_SHORT_NAME-migration -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')" = "True" ]; then 
            #  echo "DB migration succeed";  exit 0; 
            # else  
            #  echo "Unknown error";  exit 1; 
            fi;

       fi

       # output deployment status
       ./kubectl rollout status deployment $MICROSERVICE -n ${{ env.K8S_NAMESPACE }}

  notification:
    needs: build
    if: always() && (needs.build.outputs.branch !='master') && (needs.build.outputs.branch !='main')
    name: slackNotificationResult
    runs-on: ubuntu-latest
    steps:
    - uses: kanga333/variable-mapper@master
      with:
        key: "${{ needs.build.outputs.branch }}"
        map: |
          {
            "master": {
              "SLACK_WEBHOOK_URL" : "${{ secrets.PRD_SLACK_WEBHOOK_URL }}"
            },
            "staging": {
              "SLACK_WEBHOOK_URL" : "${{ secrets.PPD_SLACK_WEBHOOK_URL }}"
            },
            ".*": {
              "SLACK_WEBHOOK_URL" : "${{ secrets.QA_SLACK_WEBHOOK_URL }}"
            }
          }

    - name: Send notification to Slack
      id: slack
      uses: slackapi/slack-github-action@v1.18.0
      with:
        # For posting a rich message using Block Kit
        payload: |
          {
            "text": "",
            "blocks": [
                {
                    "type": "context",
                    "elements": [
                        {
                            "type": "image",
                            "image_url": "https://worklib-storage-prod.s3.eu-west-1.amazonaws.com/system/${{ needs.build.result}}.png",
                            "alt_text": "status icon"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "The <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}?check_suite_focus=true|${{ needs.build.outputs.deploy_type }}> finished for `${{ needs.build.outputs.microservice }}` with status: *${{ needs.build.result }}*"
                        }
                    ]
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "${{ needs.build.outputs.migration_list }} "
                    }
                },
                {
                  "type": "divider"
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
